#!/user/bin/env bash

# Creates a DevSecOps learning environment on Kali Linux

set -euo pipefail
IFS=$'\n\t'

# Log functions with timestamps
log_info() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [INFO] $1"
}

log_error() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [ERROR] $1" >&2
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   log_error "This script must be run as root"
   exit 1
fi

# Verify we're running on Kali Linux
if ! grep -q "Kali" /etc/os-release; then
    log_error "This script must be run on Kali Linux"
    exit 1
fi

# Install additional development tools
install_dev_tools() {
    log_info "Installing development tools..."
    apt-get update
    apt-get install -y \
        docker.io \
        docker-compose \
        openjdk-11-jdk \
        maven \
        gradle \
        python3-venv
}

# Install dependency scanning tools
install_dep_scanners() {
    log_info "Installing dependency scanners..."
    # OWASP Dependency-Check
    wget https://github.com/jeremylong/DependencyCheck/releases/download/v7.1.1/dependency-check-7.1.1-release.zip
    unzip dependency-check-7.1.1-release.zip -d /opt/
    ln -s /opt/dependency-check/bin/dependency-check.sh /usr/local/bin/dependency-check
    
    # Install Safety for Python dependencies
    pip3 install safety
    
    # Install Trivy for container scanning
    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
    apt-get update
    apt-get install -y trivy
}

# Install static analysis tools
install_sast_tools() {
    log_info "Installing SAST tools..."
    # Install SonarQube
    docker run -d --name sonarqube -p 9000:9000 sonarqube:lts
    
    # Install Bandit for Python
    pip3 install bandit
}

# Set up monitoring tools
setup_monitoring() {
    log_info "Setting up monitoring stack..."
    # Install ELK Stack
    docker network create monitoring
    
    # Elasticsearch
    docker run -d --name elasticsearch --net monitoring \
        -p 9200:9200 -p 9300:9300 \
        -e "discovery.type=single-node" \
        elasticsearch:7.9.3
    
    # Logstash
    docker run -d --name logstash --net monitoring \
        -p 5000:5000 \
        logstash:7.9.3
    
    # Kibana
    docker run -d --name kibana --net monitoring \
        -p 5601:5601 \
        kibana:7.9.3
    
    # Install Prometheus and Grafana
    docker run -d --name prometheus -p 9090:9090 prom/prometheus
    docker run -d --name grafana -p 3000:3000 grafana/grafana
}

# Set up GitLab with CI/CD
setup_gitlab_cicd() {
    log_info "Setting up GitLab with CI/CD..."
    # GitLab with runners
    docker run --detach \
        --hostname gitlab.local \
        --publish 443:443 --publish 80:80 --publish 22:22 \
        --name gitlab \
        --restart always \
        --volume /srv/gitlab/config:/etc/gitlab \
        --volume /srv/gitlab/logs:/var/log/gitlab \
        --volume /srv/gitlab/data:/var/opt/gitlab \
        gitlab/gitlab-ce:latest
    
    # Install GitLab Runner
    curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | bash
    apt-get install gitlab-runner
    
    # Register runner (needs manual token input)
    log_info "Please register your GitLab runner manually after GitLab is fully started"
}

# Create workspace and example files
create_workspace() {
    log_info "Creating workspace..."
    mkdir -p /opt/devsecops/{scripts,tools,reports,pipelines,monitoring}
    
    # Create example pipeline
    cat > /opt/devsecops/pipelines/example-pipeline.yml <<EOF
stages:
  - static-analysis
  - dependency-check
  - container-scan
  - dynamic-scan

sast:
  stage: static-analysis
  script:
    - shellcheck **/*.sh
    - bandit -r .

dependencies:
  stage: dependency-check
  script:
    - dependency-check --scan .

containers:
  stage: container-scan
  script:
    - trivy image my-app:latest

dast:
  stage: dynamic-scan
  script:
    - zap-baseline.py -t https://target-app.com
EOF
    
    chown -R "$SUDO_USER:$SUDO_USER" /opt/devsecops
}

# Main execution
main() {
    log_info "Starting DevSecOps environment setup on Kali Linux..."
    
    install_dev_tools
    install_dep_scanners
    install_sast_tools
    setup_monitoring
    setup_gitlab_cicd
    create_workspace
    
    log_info "Setup complete! Environment is ready for learning."
    log_info "Access points:"
    echo "GitLab: http://localhost"
    echo "SonarQube: http://localhost:9000"
    echo "Kibana: http://localhost:5601"
    echo "Grafana: http://localhost:3000"
}

main